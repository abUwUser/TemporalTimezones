import * as webpack from "ittai/webpack";
const {
    React, React: {
        useState, useEffect
    }
} = webpack
import { Users } from "ittai/stores";
import { Modal, Avatar, TextInput, Button, Text } from "ittai/components";
import { UserObject } from "ittai";
import { TimeZoneArg } from "temporal-polyfill";
import isTimezone from "../../utils/isTimezone";
import styles from "./AddUserModal.scss"


const PAGE = {
    SELECT_USER: 0,
    SELECT_TIMEZONE: 1
}

// Generated by Github Copilot. Thanks!
const getLimitedUserList = (limit: number, search = ""): Array<UserObject> => {
    // get a list of the users and sort them
    const userList = Users.getUsers()
    const userListKeysSorted = Object.keys(userList)
        .sort(() => Math.random() - 0.5)
        .filter(userId => Users.getUser(userId).username.toLowerCase().includes(search.toLowerCase()))

    // check if it should user the "limit" var or not
    const userListLimit = userListKeysSorted.length > limit ? limit : userListKeysSorted.length
    
    //slice them, make a parallel object, and return it
    const userListLimited = userListKeysSorted.slice(0, userListLimit)
    const userListLimitedObject = userListLimited.reduce((acc, key) => {
        // @ts-ignore
        acc[key] = userList[key]
        return acc
    }, {})
    return Object.values(userListLimitedObject)
}


interface Props {
    modalRootProps: Object,
    user?: UserObject | undefined
    onChooseUser: (user: UserObject, timezone: TimeZoneArg) => void
}
export default ({ modalRootProps, user: definedUser = undefined, onChooseUser}: Props) => {
    const [selectedUser, setSelectedUser] = useState<UserObject | undefined>(definedUser)

    return <Modal.ModalRoot size={Modal.ModalSize.MEDIUM} {...modalRootProps}>
        <Modal.ModalContent>
            <div className={styles["wrapper"]}>
                {selectedUser == undefined && <SelectUserScreen onChooseUser={(user) => setSelectedUser(user)}/>}

                {selectedUser != undefined && <SelectTimezoneScreen onChooseTimezone={(tz) => {
                    onChooseUser(selectedUser, tz)
                    // @ts-ignore
                    modalRootProps.onClose()
                }}/>}
            </div>
        </Modal.ModalContent>
    </Modal.ModalRoot>
}

interface SelectUserScreenProps {
    onChooseUser: (user: UserObject) => void
}
const SelectUserScreen = ({ onChooseUser }: SelectUserScreenProps) => {
    const [search, setSearch] = useState<string>("")

    const limitedUsers = getLimitedUserList(50, search)

    return <>
        <Text size={Text.Sizes.SIZE_20}>Step 1</Text>
        <Text size={Text.Sizes.SIZE_16}> Select somebody to add a timezone</Text>
        <TextInput
            placeholder="Search for users"
            onChange={(value) => setSearch(value)}
            value={search}
        />
        <div className={styles["user-grid"]}>
            {limitedUsers.map(user => <div key={user.id}
                    className={styles["user-grid-item"]}
                    onClick={() => onChooseUser(user)}
                >
                    <Avatar src={user.getAvatarURL(false, true)} size={Avatar.Sizes.SIZE_16} />
                    <span className={styles["username"]}>{user.username}</span>
                </div>
            )}
        </div>
    </>
}

interface SelectTimezoneScreenProps {
    onChooseTimezone: (tz: TimeZoneArg) => void
}
const SelectTimezoneScreen = ({ onChooseTimezone }: SelectTimezoneScreenProps) => {
    const [timezone, setTimezone] = useState<TimeZoneArg>("")
    const [timezoneError, setTimezoneError] = useState<boolean>(false)

    return <>
        <TextInput
            placeholder="Timezone"
            onChange={(value) => setTimezone(value)}
            value={timezone as string}
            error={timezoneError}
        />
        <Button onClick={() => {
            if (!isTimezone(timezone)) {
                setTimezoneError(true)
                return
            }
            onChooseTimezone(timezone)
        }}>Add user</Button>
    </>
}